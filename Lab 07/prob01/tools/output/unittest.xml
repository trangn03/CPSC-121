<?xml version="1.0" encoding="UTF-8"?>
<testsuites tests="10" failures="1" disabled="0" errors="0" time="0.301" timestamp="2021-10-15T18:52:11" name="AllTests">
  <testsuite name="UnscrambleTest" tests="6" failures="0" disabled="0" errors="0" time="0.157" timestamp="2021-10-15T18:52:11">
    <testcase name="UnscrambleEmptyString" status="run" result="completed" time="0.021" timestamp="2021-10-15T18:52:11" classname="UnscrambleTest" />
    <testcase name="UnscrambleSingleLetterNotInDictionary" status="run" result="completed" time="0.023" timestamp="2021-10-15T18:52:11" classname="UnscrambleTest" />
    <testcase name="UnscrambleSingleLetterInDictionary" status="run" result="completed" time="0.027" timestamp="2021-10-15T18:52:11" classname="UnscrambleTest" />
    <testcase name="UnscrambleTwoLetterStringsAllStringsInDictionary" status="run" result="completed" time="0.026" timestamp="2021-10-15T18:52:11" classname="UnscrambleTest" />
    <testcase name="UnscrambleTwoLetterStringsOnlyOneStringInDictionary" status="run" result="completed" time="0.022" timestamp="2021-10-15T18:52:11" classname="UnscrambleTest" />
    <testcase name="UnscrambleManyLetterWordSomeInDictionary" status="run" result="completed" time="0.033" timestamp="2021-10-15T18:52:11" classname="UnscrambleTest" />
  </testsuite>
  <testsuite name="ScrabbleSolverTest" tests="2" failures="1" disabled="0" errors="0" time="0.144" timestamp="2021-10-15T18:52:11">
    <testcase name="UnscrambleWithMultipleWords_PrintsWordsInDictionary" status="run" result="completed" time="0.144" timestamp="2021-10-15T18:52:11" classname="ScrabbleSolverTest">
      <failure message="../settings/unittest.cc:236&#x0A;Death test: (UnscrambleWithMultipleWords_PrintsWordsInDictionary(), exit(0))&#x0A;    Result: died but not with expected exit code:&#x0A;            Exited with exit status 1&#x0A;Actual msg:&#x0A;[  DEATH   ] =================================================================&#x0A;[  DEATH   ] ==39993==ERROR: AddressSanitizer: dynamic-stack-buffer-overflow on address 0x7f1e58afd790 at pc 0x0000004d5252 bp 0x7f1e58afcf50 sp 0x7f1e58afcf48&#x0A;[  DEATH   ] READ of size 4 at 0x7f1e58afd790 thread T7&#x0A;[  DEATH   ]     #0 0x4d5251 in Scr(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt;&amp;, int*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4d5251)&#x0A;[  DEATH   ]     #1 0x4d5378 in Scr(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt;&amp;, int*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4d5378)&#x0A;[  DEATH   ]     #2 0x4d5378 in Scr(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt;&amp;, int*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4d5378)&#x0A;[  DEATH   ]     #3 0x4d5378 in Scr(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt;&amp;, int*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4d5378)&#x0A;[  DEATH   ]     #4 0x4d593e in ScrabbleSolver(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt;&amp;) (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4d593e)&#x0A;[  DEATH   ]     #5 0x4ffd23 in UnscrambleWithMultipleWords_PrintsWordsInDictionary()::$_7::operator()(std::promise&lt;bool&gt;&amp;) const (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4ffd23)&#x0A;[  DEATH   ]     #6 0x4fef69 in void std::__invoke_impl&lt;void, UnscrambleWithMultipleWords_PrintsWordsInDictionary()::$_7, std::reference_wrapper&lt;std::promise&lt;bool&gt; &gt; &gt;(std::__invoke_other, UnscrambleWithMultipleWords_PrintsWordsInDictionary()::$_7&amp;&amp;, std::reference_wrapper&lt;std::promise&lt;bool&gt; &gt;&amp;&amp;) (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4fef69)&#x0A;[  DEATH   ]     #7 0x4feeb1 in std::__invoke_result&lt;UnscrambleWithMultipleWords_PrintsWordsInDictionary()::$_7, std::reference_wrapper&lt;std::promise&lt;bool&gt; &gt; &gt;::type std::__invoke&lt;UnscrambleWithMultipleWords_PrintsWordsInDictionary()::$_7, std::reference_wrapper&lt;std::promise&lt;bool&gt; &gt; &gt;(UnscrambleWithMultipleWords_PrintsWordsInDictionary()::$_7&amp;&amp;, std::reference_wrapper&lt;std::promise&lt;bool&gt; &gt;&amp;&amp;) (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4feeb1)&#x0A;[  DEATH   ]     #8 0x4fee74 in void std::thread::_Invoker&lt;std::tuple&lt;UnscrambleWithMultipleWords_PrintsWordsInDictionary()::$_7, std::reference_wrapper&lt;std::promise&lt;bool&gt; &gt; &gt; &gt;::_M_invoke&lt;0ul, 1ul&gt;(std::_Index_tuple&lt;0ul, 1ul&gt;) (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4fee74)&#x0A;[  DEATH   ]     #9 0x4fee24 in std::thread::_Invoker&lt;std::tuple&lt;UnscrambleWithMultipleWords_PrintsWordsInDictionary()::$_7, std::reference_wrapper&lt;std::promise&lt;bool&gt; &gt; &gt; &gt;::operator()() (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4fee24)&#x0A;[  DEATH   ]     #10 0x4fecbd in std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;UnscrambleWithMultipleWords_PrintsWordsInDictionary()::$_7, std::reference_wrapper&lt;std::promise&lt;bool&gt; &gt; &gt; &gt; &gt;::_M_run() (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4fecbd)&#x0A;[  DEATH   ]     #11 0x7f1e5c53ade3  (/lib/x86_64-linux-gnu/libstdc++.so.6+0xd6de3)&#x0A;[  DEATH   ]     #12 0x7f1e5c2fb608 in start_thread /build/glibc-eX1tMB/glibc-2.31/nptl/pthread_create.c:477:8&#x0A;[  DEATH   ]     #13 0x7f1e5c1f4292 in clone /build/glibc-eX1tMB/glibc-2.31/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:95&#x0A;[  DEATH   ] &#x0A;[  DEATH   ] Address 0x7f1e58afd790 is located in stack of thread T6 at offset 560 in frame&#x0A;[  DEATH   ]     #0 0x4d4fff in Scr(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt;&amp;, int*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4d4fff)&#x0A;[  DEATH   ] &#x0A;[  DEATH   ]   This frame has 2 object(s):&#x0A;[  DEATH   ]     [32, 64) &apos;agg.tmp&apos;&#x0A;[  DEATH   ]     [96, 128) &apos;agg.tmp8&apos; &lt;== Memory access at offset 560 overflows this variable&#x0A;[  DEATH   ] HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork&#x0A;[  DEATH   ]       (longjmp and C++ exceptions *are* supported)&#x0A;[  DEATH   ] Thread T6 created by T0 here:&#x0A;[  DEATH   ]     #0 0x48d14a in pthread_create (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x48d14a)&#x0A;[  DEATH   ]     #1 0x7f1e5c53b0a8 in std::thread::_M_start_thread(std::unique_ptr&lt;std::thread::_State, std::default_delete&lt;std::thread::_State&gt; &gt;, void (*)()) (/lib/x86_64-linux-gnu/libstdc++.so.6+0xd70a8)&#x0A;[  DEATH   ]     #2 0x4e8c73 in UnscrambleManyLetterWordSomeInDictionary() (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4e8c73)&#x0A;[  DEATH   ]     #3 0x4ea22f in UnscrambleTest_UnscrambleManyLetterWordSomeInDictionary_Test::TestBody() (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4ea22f)&#x0A;[  DEATH   ]     #4 0x55ae30 in void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*) obj-x86_64-linux-gnu/googletest/./googletest/src/gtest.cc:2433:27&#x0A;[  DEATH   ]     #5 0x55ae30 in void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*) obj-x86_64-linux-gnu/googletest/./googletest/src/gtest.cc:2469:52&#x0A;[  DEATH   ] &#x0A;[  DEATH   ] SUMMARY: AddressSanitizer: dynamic-stack-buffer-overflow (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4d5251) in Scr(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, bool&gt; &gt; &gt;&amp;, int*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&#x0A;[  DEATH   ] Shadow bytes around the buggy address:&#x0A;[  DEATH   ]   0x0fe44b157aa0: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1&#x0A;[  DEATH   ]   0x0fe44b157ab0: 00 00 00 00 f2 f2 f2 f2 00 00 00 00 f3 f3 f3 f3&#x0A;[  DEATH   ]   0x0fe44b157ac0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00&#x0A;[  DEATH   ]   0x0fe44b157ad0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00&#x0A;[  DEATH   ]   0x0fe44b157ae0: 00 00 00 00 00 00 00 00 00 00 00 00 ca ca ca ca&#x0A;[  DEATH   ] =&gt;0x0fe44b157af0: 00 00[cb]cb cb cb cb cb f1 f1 f1 f1 00 00 00 00&#x0A;[  DEATH   ]   0x0fe44b157b00: f2 f2 f2 f2 00 00 00 00 f2 f2 f2 f2 00 00 00 00&#x0A;[  DEATH   ]   0x0fe44b157b10: f3 f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00&#x0A;[  DEATH   ]   0x0fe44b157b20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00&#x0A;[  DEATH   ]   0x0fe44b157b30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00&#x0A;[  DEATH   ]   0x0fe44b157b40: f1 f1 f1 f1 00 00 00 00 00 00 00 00 00 00 00 00&#x0A;[  DEATH   ] Shadow byte legend (one shadow byte represents 8 application bytes):&#x0A;[  DEATH   ]   Addressable:           00&#x0A;[  DEATH   ]   Partially addressable: 01 02 03 04 05 06 07 &#x0A;[  DEATH   ]   Heap left redzone:       fa&#x0A;[  DEATH   ]   Freed heap region:       fd&#x0A;[  DEATH   ]   Stack left redzone:      f1&#x0A;[  DEATH   ]   Stack mid redzone:       f2&#x0A;[  DEATH   ]   Stack right redzone:     f3&#x0A;[  DEATH   ]   Stack after return:      f5&#x0A;[  DEATH   ]   Stack use after scope:   f8&#x0A;[  DEATH   ]   Global redzone:          f9&#x0A;[  DEATH   ]   Global init order:       f6&#x0A;[  DEATH   ]   Poisoned by user:        f7&#x0A;[  DEATH   ]   Container overflow:      fc&#x0A;[  DEATH   ]   Array cookie:            ac&#x0A;[  DEATH   ]   Intra object redzone:    bb&#x0A;[  DEATH   ]   ASan internal:           fe&#x0A;[  DEATH   ]   Left alloca redzone:     ca&#x0A;[  DEATH   ]   Right alloca redzone:    cb&#x0A;[  DEATH   ]   Shadow gap:              cc&#x0A;[  DEATH   ] Thread T7 created by T0 here:&#x0A;[  DEATH   ]     #0 0x48d14a in pthread_create (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x48d14a)&#x0A;[  DEATH   ]     #1 0x7f1e5c53b0a8 in std::thread::_M_start_thread(std::unique_ptr&lt;std::thread::_State, std::default_delete&lt;std::thread::_State&gt; &gt;, void (*)()) (/lib/x86_64-linux-gnu/libstdc++.so.6+0xd70a8)&#x0A;[  DEATH   ]     #2 0x4eaeec in UnscrambleWithMultipleWords_PrintsWordsInDictionary() (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4eaeec)&#x0A;[  DEATH   ]     #3 0x4ebfaa in ScrabbleSolverTest_UnscrambleWithMultipleWords_PrintsWordsInDictionary_Test::TestBody() (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4ebfaa)&#x0A;[  DEATH   ]     #4 0x55ae30 in void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*) obj-x86_64-linux-gnu/googletest/./googletest/src/gtest.cc:2433:27&#x0A;[  DEATH   ]     #5 0x55ae30 in void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*) obj-x86_64-linux-gnu/googletest/./googletest/src/gtest.cc:2469:52&#x0A;[  DEATH   ] &#x0A;[  DEATH   ] ==39993==ABORTING&#x0A;[  DEATH   ] &#x0A;    Should not crash or infinitely loop." type=""><![CDATA[../settings/unittest.cc:236
Death test: (UnscrambleWithMultipleWords_PrintsWordsInDictionary(), exit(0))
    Result: died but not with expected exit code:
            Exited with exit status 1
Actual msg:
[  DEATH   ] =================================================================
[  DEATH   ] ==39993==ERROR: AddressSanitizer: dynamic-stack-buffer-overflow on address 0x7f1e58afd790 at pc 0x0000004d5252 bp 0x7f1e58afcf50 sp 0x7f1e58afcf48
[  DEATH   ] READ of size 4 at 0x7f1e58afd790 thread T7
[  DEATH   ]     #0 0x4d5251 in Scr(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, bool> > >&, int*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4d5251)
[  DEATH   ]     #1 0x4d5378 in Scr(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, bool> > >&, int*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4d5378)
[  DEATH   ]     #2 0x4d5378 in Scr(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, bool> > >&, int*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4d5378)
[  DEATH   ]     #3 0x4d5378 in Scr(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, bool> > >&, int*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4d5378)
[  DEATH   ]     #4 0x4d593e in ScrabbleSolver(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, bool> > >&) (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4d593e)
[  DEATH   ]     #5 0x4ffd23 in UnscrambleWithMultipleWords_PrintsWordsInDictionary()::$_7::operator()(std::promise<bool>&) const (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4ffd23)
[  DEATH   ]     #6 0x4fef69 in void std::__invoke_impl<void, UnscrambleWithMultipleWords_PrintsWordsInDictionary()::$_7, std::reference_wrapper<std::promise<bool> > >(std::__invoke_other, UnscrambleWithMultipleWords_PrintsWordsInDictionary()::$_7&&, std::reference_wrapper<std::promise<bool> >&&) (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4fef69)
[  DEATH   ]     #7 0x4feeb1 in std::__invoke_result<UnscrambleWithMultipleWords_PrintsWordsInDictionary()::$_7, std::reference_wrapper<std::promise<bool> > >::type std::__invoke<UnscrambleWithMultipleWords_PrintsWordsInDictionary()::$_7, std::reference_wrapper<std::promise<bool> > >(UnscrambleWithMultipleWords_PrintsWordsInDictionary()::$_7&&, std::reference_wrapper<std::promise<bool> >&&) (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4feeb1)
[  DEATH   ]     #8 0x4fee74 in void std::thread::_Invoker<std::tuple<UnscrambleWithMultipleWords_PrintsWordsInDictionary()::$_7, std::reference_wrapper<std::promise<bool> > > >::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4fee74)
[  DEATH   ]     #9 0x4fee24 in std::thread::_Invoker<std::tuple<UnscrambleWithMultipleWords_PrintsWordsInDictionary()::$_7, std::reference_wrapper<std::promise<bool> > > >::operator()() (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4fee24)
[  DEATH   ]     #10 0x4fecbd in std::thread::_State_impl<std::thread::_Invoker<std::tuple<UnscrambleWithMultipleWords_PrintsWordsInDictionary()::$_7, std::reference_wrapper<std::promise<bool> > > > >::_M_run() (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4fecbd)
[  DEATH   ]     #11 0x7f1e5c53ade3  (/lib/x86_64-linux-gnu/libstdc++.so.6+0xd6de3)
[  DEATH   ]     #12 0x7f1e5c2fb608 in start_thread /build/glibc-eX1tMB/glibc-2.31/nptl/pthread_create.c:477:8
[  DEATH   ]     #13 0x7f1e5c1f4292 in clone /build/glibc-eX1tMB/glibc-2.31/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:95
[  DEATH   ] 
[  DEATH   ] Address 0x7f1e58afd790 is located in stack of thread T6 at offset 560 in frame
[  DEATH   ]     #0 0x4d4fff in Scr(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, bool> > >&, int*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4d4fff)
[  DEATH   ] 
[  DEATH   ]   This frame has 2 object(s):
[  DEATH   ]     [32, 64) 'agg.tmp'
[  DEATH   ]     [96, 128) 'agg.tmp8' <== Memory access at offset 560 overflows this variable
[  DEATH   ] HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
[  DEATH   ]       (longjmp and C++ exceptions *are* supported)
[  DEATH   ] Thread T6 created by T0 here:
[  DEATH   ]     #0 0x48d14a in pthread_create (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x48d14a)
[  DEATH   ]     #1 0x7f1e5c53b0a8 in std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (/lib/x86_64-linux-gnu/libstdc++.so.6+0xd70a8)
[  DEATH   ]     #2 0x4e8c73 in UnscrambleManyLetterWordSomeInDictionary() (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4e8c73)
[  DEATH   ]     #3 0x4ea22f in UnscrambleTest_UnscrambleManyLetterWordSomeInDictionary_Test::TestBody() (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4ea22f)
[  DEATH   ]     #4 0x55ae30 in void testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) obj-x86_64-linux-gnu/googletest/./googletest/src/gtest.cc:2433:27
[  DEATH   ]     #5 0x55ae30 in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) obj-x86_64-linux-gnu/googletest/./googletest/src/gtest.cc:2469:52
[  DEATH   ] 
[  DEATH   ] SUMMARY: AddressSanitizer: dynamic-stack-buffer-overflow (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4d5251) in Scr(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, bool> > >&, int*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
[  DEATH   ] Shadow bytes around the buggy address:
[  DEATH   ]   0x0fe44b157aa0: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1
[  DEATH   ]   0x0fe44b157ab0: 00 00 00 00 f2 f2 f2 f2 00 00 00 00 f3 f3 f3 f3
[  DEATH   ]   0x0fe44b157ac0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
[  DEATH   ]   0x0fe44b157ad0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
[  DEATH   ]   0x0fe44b157ae0: 00 00 00 00 00 00 00 00 00 00 00 00 ca ca ca ca
[  DEATH   ] =>0x0fe44b157af0: 00 00[cb]cb cb cb cb cb f1 f1 f1 f1 00 00 00 00
[  DEATH   ]   0x0fe44b157b00: f2 f2 f2 f2 00 00 00 00 f2 f2 f2 f2 00 00 00 00
[  DEATH   ]   0x0fe44b157b10: f3 f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00
[  DEATH   ]   0x0fe44b157b20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
[  DEATH   ]   0x0fe44b157b30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
[  DEATH   ]   0x0fe44b157b40: f1 f1 f1 f1 00 00 00 00 00 00 00 00 00 00 00 00
[  DEATH   ] Shadow byte legend (one shadow byte represents 8 application bytes):
[  DEATH   ]   Addressable:           00
[  DEATH   ]   Partially addressable: 01 02 03 04 05 06 07 
[  DEATH   ]   Heap left redzone:       fa
[  DEATH   ]   Freed heap region:       fd
[  DEATH   ]   Stack left redzone:      f1
[  DEATH   ]   Stack mid redzone:       f2
[  DEATH   ]   Stack right redzone:     f3
[  DEATH   ]   Stack after return:      f5
[  DEATH   ]   Stack use after scope:   f8
[  DEATH   ]   Global redzone:          f9
[  DEATH   ]   Global init order:       f6
[  DEATH   ]   Poisoned by user:        f7
[  DEATH   ]   Container overflow:      fc
[  DEATH   ]   Array cookie:            ac
[  DEATH   ]   Intra object redzone:    bb
[  DEATH   ]   ASan internal:           fe
[  DEATH   ]   Left alloca redzone:     ca
[  DEATH   ]   Right alloca redzone:    cb
[  DEATH   ]   Shadow gap:              cc
[  DEATH   ] Thread T7 created by T0 here:
[  DEATH   ]     #0 0x48d14a in pthread_create (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x48d14a)
[  DEATH   ]     #1 0x7f1e5c53b0a8 in std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (/lib/x86_64-linux-gnu/libstdc++.so.6+0xd70a8)
[  DEATH   ]     #2 0x4eaeec in UnscrambleWithMultipleWords_PrintsWordsInDictionary() (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4eaeec)
[  DEATH   ]     #3 0x4ebfaa in ScrabbleSolverTest_UnscrambleWithMultipleWords_PrintsWordsInDictionary_Test::TestBody() (/home/trang/Documents/lab-07-trangn03/prob01/tools/output/unittest+0x4ebfaa)
[  DEATH   ]     #4 0x55ae30 in void testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) obj-x86_64-linux-gnu/googletest/./googletest/src/gtest.cc:2433:27
[  DEATH   ]     #5 0x55ae30 in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) obj-x86_64-linux-gnu/googletest/./googletest/src/gtest.cc:2469:52
[  DEATH   ] 
[  DEATH   ] ==39993==ABORTING
[  DEATH   ] 
    Should not crash or infinitely loop.]]></failure>
    </testcase>
    <testcase name="UnscrambleWithMultipleWords_DoesntPrintInvalidWords" status="run" result="skipped" time="0" timestamp="2021-10-15T18:52:11" classname="ScrabbleSolverTest" />
  </testsuite>
  <testsuite name="ScrabbleSolverNoDupesTest" tests="2" failures="0" disabled="0" errors="0" time="0" timestamp="2021-10-15T18:52:11">
    <testcase name="DoesNotDuplicateWordsWhenGivenRepeatedLetters" status="run" result="skipped" time="0" timestamp="2021-10-15T18:52:11" classname="ScrabbleSolverNoDupesTest" />
    <testcase name="DoesNotDuplicateWordsWhenGivenManyRepeatedLetters" status="run" result="skipped" time="0" timestamp="2021-10-15T18:52:11" classname="ScrabbleSolverNoDupesTest" />
  </testsuite>
</testsuites>
